// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using minimal_api_ef;

#nullable disable

namespace minimal_api_ef.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20240627031025_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("minimal_api_ef.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f8cbb403-432c-4585-a7d1-850685e65aa8"),
                            Name = "Pending Activities",
                            Point = 20
                        },
                        new
                        {
                            CategoryId = new Guid("f8cbb403-432c-4585-a7d1-850685e65ab6"),
                            Name = "Personal Activities",
                            Point = 50
                        });
                });

            modelBuilder.Entity("minimal_api_ef.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("integer");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb410"),
                            CategoryId = new Guid("f8cbb403-432c-4585-a7d1-850685e65aa8"),
                            CreationDate = new DateTime(2024, 6, 26, 22, 10, 24, 809, DateTimeKind.Local).AddTicks(6418),
                            TaskPriority = 1,
                            TaskStatus = 0,
                            Title = "Taxes payment"
                        },
                        new
                        {
                            TaskId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb411"),
                            CategoryId = new Guid("f8cbb403-432c-4585-a7d1-850685e65ab6"),
                            CreationDate = new DateTime(2024, 6, 26, 22, 10, 24, 809, DateTimeKind.Local).AddTicks(6447),
                            TaskPriority = 0,
                            TaskStatus = 1,
                            Title = "Netflix Payment"
                        });
                });

            modelBuilder.Entity("minimal_api_ef.Models.Task", b =>
                {
                    b.HasOne("minimal_api_ef.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("minimal_api_ef.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
